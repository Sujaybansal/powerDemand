from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
%matplotlib inline

df = pd.read_csv('/content/drive/MyDrive/CSVForDate.csv')
df.head()
# df.tail()

df.columns = ['Date','PowerRate']
df.head()

df['Date'] = pd.to_datetime(df['Date'])
df.head()

df.set_index('Date',inplace=True)
df.head()

df.plot()

df['PowerRate'].rolling(12).mean().plot(label='12 SMA',figsize=(16,8))
df['PowerRate'].rolling(12).std().plot(label='12 STD')
df['PowerRate'].plot()
# df.sort_index(inplace=True)
plt.legend()

from statsmodels.tsa.seasonal import seasonal_decompose

# df.sort_index(inplace=True)
# period=90
decomp= seasonal_decompose(df["PowerRate"],freq=200)
# decomp= seasonal_decompose(x=df['PowerData'],model='additive')
fig = decomp.plot()
fig.set_size_inches(14,7)

from statsmodels.tsa.stattools import adfuller

fuller_test = adfuller(df['PowerRate'])
fuller_test

def test_p_value(data):
        fuller_test = adfuller(data)
        print('P-value: ',fuller_test[1])
        if fuller_test[1] <= 0.05:
            print('Reject null hypothesis, data is stationary')
        else:
            print('Do not reject null hypothesis, data is not stationary')

test_p_value(df['PowerRate'])

df['First_diff'] = df['PowerRate'] - df['PowerRate'].shift(1)
df['First_diff'].plot()

test_p_value(df['First_diff'].dropna())

df['Second_diff'] = df['First_diff'] - df['First_diff'].shift(1)
df['Second_diff'].plot()

test_p_value(df['Second_diff'].dropna())

df['Seasonal_diff'] = df['PowerRate'] - df['PowerRate'].shift(20)
df['Seasonal_diff'].plot()

test_p_value(df['Seasonal_diff'].dropna())

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf


first_diff = plot_acf(df['First_diff'].dropna())

sec_diff = plot_pacf(df['Second_diff'].dropna())

p1 = plot_acf(df['Seasonal_diff'].dropna())
p2 = plot_pacf(df['Seasonal_diff'].dropna())

from statsmodels.tsa.arima_model import ARIMA

model = sm.tsa.statespace.SARIMAX(df['PowerRate'],order=(5,2,0),seasonal_order=(5,2,0,12))

results = model.fit()
results.summary()

results.resid

results.resid.plot()

results.resid.plot(kind='kde')

df['prediction'] = results.predict()
df[['PowerRate','prediction']].plot(figsize=(12,8))

from pandas.tseries.offsets import DateOffset
extra_dates = [df.index[-1] + DateOffset(months=m) for m in range (1,24)]

from pandas import Timestamp

extra_dates
[Timestamp('2021-10-02 00:00:00'),
 Timestamp('2021-10-03 00:00:00'),
 Timestamp('2021-10-04 00:00:00'),
 Timestamp('2021-10-05 00:00:00'),
 Timestamp('2021-10-06 00:00:00'),
 Timestamp('2021-10-07 00:00:00'),
 Timestamp('2021-10-08 00:00:00'),
 Timestamp('2021-10-09 00:00:00'),
 Timestamp('2021-10-10 00:00:00'),
 Timestamp('2021-10-11 00:00:00'),
 Timestamp('2021-10-12 00:00:00'),
 Timestamp('2021-10-13 00:00:00'),
 Timestamp('2021-10-14 00:00:00'),
 Timestamp('2021-10-15 00:00:00'),
 Timestamp('2021-10-16 00:00:00'),
 Timestamp('2021-10-17 00:00:00'),
 Timestamp('2021-10-18 00:00:00'),
 Timestamp('2021-10-19 00:00:00'),
 Timestamp('2021-10-20 00:00:00'),
 Timestamp('2021-10-21 00:00:00'),
 Timestamp('2021-10-22 00:00:00'),
 Timestamp('2021-10-23 00:00:00'),
 Timestamp('2021-10-24 00:00:00')]

forecast_df = pd.DataFrame(index=extra_dates,columns=df.columns)
forecast_df.head()
# forecast_df.tail()
# forecast_df.summary()

forecast_df.tail()

 final_df = pd.concat([df,forecast_df])

final_df['forecast_df'] = results.predict(start=1650, end=1824)
final_df[['PowerRate','forecast_df']].plot(figsize=(12,8))

